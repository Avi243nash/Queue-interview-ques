You have to implement Queue data structure using a LinkedList. Complete the given class Queue containing the following functionalities

Push(int x): Inserts an integer x in the queue

Pop(): Removes the element at the front of the queue and returns it

Front(); Returns the element at front of the queue

Size(): Returns the number of elements in the queue

Input Format
First line contains an integer n, which is the number of operations

Each line i of the n subsequent lines (where 0<=i<n ) defines an operation to be performed. Each operation starts with a single integer, op (where op belongs to {1, 2, 3, 4} ), denoting a type of operation as defined in the Problem Statement above. If the operation requires an argument, op is followed by its space-separated argument. For example, if op = 1, and integer to be pushed if 4, then line i will be 1 4.

Output Format
Complete the functions and return the required numbers accordingly

Example 1
Input

8
1 1
1 2
1 3
1 4
3
2
3
4
Output

1
1
2
3
Explanation

We have n = 8, so there are 8 operations to be performed

op = 1, Push(1), queue = {1}
op = 1, Push(2), queue = {1,2}
op = 1, Push(3), queue = {1,2,3}
op = 1, Push(4), queue = {1,2,3,4}
op = 3, Front(), print 1
op = 2, Pop(), queue = {2,3,4}, print 1
op = 3, Front(), print 2
op = 4, Size(), print 3
Constraints
There will be at max 1000 elements in the queue

op = {1,2,3,4}
-----------------------------------------------------------------
-----------------------------------------------------------------
Back to Question
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
⌄
⌄
⌄
⌄
⌄
⌄
⌄
import java.util.*;
class LinkedListNode
	{
		int data;
		LinkedListNode next;

		LinkedListNode(int value)
		{
			data = value;
			next = null;
		}
	}
class Queue {
    //Write your code here
	LinkedListNode head = null;
	LinkedListNode tail = null;
	int count = 0;
    public void push(int value) {
        //Write your code here
		count++;
		LinkedListNode currentNode = new LinkedListNode(value);
		if(head == null && tail == null)
		{
			head = currentNode;
			tail = currentNode;
		}
		else
		{
			
			tail.next = currentNode;
			tail = currentNode;
		}
    }
    public int pop() {
        //Write your code here
		count--;
